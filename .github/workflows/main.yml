# This is a basic workflow to help you get started with Actions

name: Build Docker Image and Deploy to AWS ECR

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Set up JDK 11
        uses: actions/setup-java@v3.4.0
        with:
          java-version: 11
          # Java distribution. See the list of supported distributions in README file
          distribution: temurin
          # The package type (jdk, jre, jdk+fx, jre+fx)
          java-package: jdk
          # The architecture of the package
          architecture: x64
          # Name of the build platform to cache dependencies. It can be "maven", "gradle" or "sbt".
          cache: maven
          
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: spring-boot
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      
      - name: Amazon ECS "Render Task Definition" Action
        id: task-def
        # You may pin to the exact commit or the version.
        # uses: aws-actions/amazon-ecs-render-task-definition@374ee96751fffe528c09b5f427848da60469bb55
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          # The path to the ECS task definition JSON file
          task-definition: task-definition.json
          # The name of the container defined in the containerDefinitions section of the ECS task definition
          container-name: spring-web-container
          # The URI of the container image to insert into the ECS task definition
          image: ${{ steps.build-image.outputs.image }}
          
      #- name: Amazon ECS "Deploy Task Definition" Action
        # You may pin to the exact commit or the version.
        # uses: aws-actions/amazon-ecs-deploy-task-definition@9c18d81893224634ac107b91720119c91c1d600e
       # uses: aws-actions/amazon-ecs-deploy-task-definition@v1
       # with:
          # The path to the ECS task definition file to register
         # task-definition: ${{ steps.task-def.outputs.task-definition }}
          # The name of the ECS service's cluster.  Will default to the 'default' cluster
          #cluster: spring-cluster
          
      - name: Amazon ECS "Deploy Task Definition and Run Task" Action
        # You may pin to the exact commit or the version.
        # uses: robbie-unlikelyai/amazon-ecs-run-task@925c70f7e567333a7669770478cba77ecd5acec8
        uses: robbie-unlikelyai/amazon-ecs-run-task@v2
        with:
          # The name of ECS task definition
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          # The name of the ECS cluster. Will default to the 'default' cluster
          cluster: spring-cluster
          # The count of tasks to run. Will default to the 1
          count: 1
          # The value of the task started-by
          started-by: github-actions-${{ github.actor }}
          # The subnet to run the task in
          subnet: subnet-0cfa5ed0e04c8d43d
          # The security ground to run the task with
          security-group: sg-0dc92340a3450bec5
          
      - name: Configure AWS ELB Target Group
        # You may pin to the exact commit or the version.
        # uses: icalia-actions/aws-configure-elb-target-group@7ea43ad0fd746b0f625788b986fffe1ee023cc80
        uses: icalia-actions/aws-configure-elb-target-group@v0.0.3
        with:
          # The name of the target group.
          name: ecs-tg
          # The protocol to use for routing traffic to the targets.
          protocol: HTTP
          # The protocol version.
          protocol-version: HTTP1
          # The port for the load balancer traffic
          port: 80
          # The identifier of the virtual private cloud (VPC).
          vpc-id: vpc-0db99500d60c4ecf5
          # The protocol the load balancer uses when performing health checks on targets.
          health-check-protocol: HTTP
          # The destination for health checks on the targets.
          health-check-path: /
          # The port on which the targets receive traffic.
          target-type: ip
